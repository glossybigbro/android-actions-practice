name: "[Build] Deploy All APKs"

on:
  workflow_dispatch:

permissions: {}  # 기본 권한 제거

jobs:
  build_apks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        gradle_command: [ ":app:assembleRelease", ":app:assembleDebug" ]
    outputs:
      release_artifact_name: ${{ steps.set_artifact_name.outputs.release_artifact_name }}
      debug_artifact_name: ${{ steps.set_artifact_name.outputs.debug_artifact_name }}
    # 필요한 권한 명시적으로 설정
    permissions:
      contents: read # 소스 코드 체크아웃에 필요
      actions: write # 아티팩트 업로드에 필요
    steps:
      # 소스 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v4.2.0

      # Java 환경 설정
      - name: Set Up Java Environment
        uses: ./.github/actions/setup-java

      # APK 빌드
      - name: Build APK
        run: ./gradlew ${{ matrix.gradle_command }}

      # APK 파일 경로 확인 및 빌드 타입별 구분
      - name: Retrieve APK Paths
        id: apk
        run: |
          BUILD_MODE=$(if [[ "${{ matrix.gradle_command }}" == *"Release" ]]; then echo "release"; else echo "debug"; fi)
          echo "BUILD_MODE=$BUILD_MODE" >> $GITHUB_ENV
          APK_FILES=$(find ./app/build/outputs/apk/ -name "*$BUILD_MODE*.apk")
          if [ -z "$APK_FILES" ]; then
            echo "Error: No APK files found for $BUILD_MODE!" # APK 파일이 없을 경우 에러 메시지 출력
            exit 1
          fi
          echo "Found APK files: $APK_FILES"
          echo "APK_PATHS_$BUILD_MODE<<EOF" >> $GITHUB_OUTPUT
          echo "$APK_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 아티팩트 이름 설정 (날짜와 시간 포함)
      - name: Set Artifact Name
        id: set_artifact_name
        run: |
          DATE=$(TZ="Asia/Seoul" date +"%Y%m%d-%I%M%S%p")
          BUILD_MODE=${{ env.BUILD_MODE }}
          ARTIFACT_NAME="apks-${BUILD_MODE}-${DATE}"
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          echo "${BUILD_MODE^^}_ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

      # APK 파일 압축 및 업로드
      - name: Zip and Upload APK Files
        run: |
          mkdir -p apks
          BUILD_MODE=${{ env.BUILD_MODE }}
          ARTIFACT_NAME="${{ env.ARTIFACT_NAME }}"
          if [[ "$BUILD_MODE" == "release" ]]; then
            APK_PATHS="${{ steps.apk.outputs.APK_PATHS_release }}"
          else
            APK_PATHS="${{ steps.apk.outputs.APK_PATHS_debug }}"
          fi
          cp $APK_PATHS apks/
          zip -j "$GITHUB_WORKSPACE/$ARTIFACT_NAME.zip" apks/*.apk
          echo "ZIP_NAME=$GITHUB_WORKSPACE/$ARTIFACT_NAME.zip" >> $GITHUB_ENV

      # APK ZIP 파일 업로드
      - name: Upload APK Zip to GitHub Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ZIP_NAME }}
          if-no-files-found: error

  zip_apks:
    needs: build_apks
    runs-on: ubuntu-latest
    permissions:
      actions: write  # 아티팩트 업로드 및 다운로드 하는 데 필요
    steps:
      # 릴리즈 APK 다운로드
      - name: Download Release APK
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build_apks.outputs.release_artifact_name }}

      # 디버그 APK 다운로드
      - name: Download Debug APK
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build_apks.outputs.debug_artifact_name }}

      # 모든 ZIP 파일 해제
      - name: Unzip All Downloaded APKs
        run: |
          mkdir -p apk_files
          unzip '*.zip' -d apk_files

      # APK 파일을 ZIP으로 다시 압축
      - name: Create Zip from APKs
        run: |
          DATE=$(TZ="Asia/Seoul" date +"%Y%m%d-%I%M%S%p")
          FILE_NAME="apks-${DATE}"
          APK_COUNT=$(find apk_files -name '*.apk' | wc -l)
          if [ "$APK_COUNT" -gt 0 ]; then
            zip -j "$GITHUB_WORKSPACE/$FILE_NAME.zip" apk_files/*.apk
            echo "Success: Created ZIP file: $GITHUB_WORKSPACE/$FILE_NAME"
            echo "ZIP_NAME=$GITHUB_WORKSPACE/$FILE_NAME.zip" >> $GITHUB_ENV
            echo "ARTIFACT_NAME=$FILE_NAME" >> $GITHUB_ENV
          else
            echo "Error: No APK files found to zip!"
            exit 1
          fi

      # ZIP 파일 업로드
      - name: Upload All APK Zip to GitHub Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ZIP_NAME }}
          if-no-files-found: error