name: "CI - Publish Unit Test Results"

on:
  workflow_run:
    workflows: ["CI - Verify Unit Test"] # Verify 워크플로 이름과 동일해야 함
    types:
      - completed

permissions: {} # 기본 권한 제거

jobs:
  publish_results:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'skipped' # Verify Unit Test가 스킵되지 않았을 경우만 실행
    permissions:
      checks: write # 커밋 상태 업데이트
      pull-requests: write # PR에 코멘트 작성
      actions: read # 아티팩트 다운로드에 필요

    steps:
      # 디버깅: Workflow Context 확인
      - name: Debug Workflow Context
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Workflow Run ID: ${{ github.event.workflow_run.id }}"
          echo "Workflow Run Name: ${{ github.event.workflow_run.name }}"

      # 테스트 결과 다운로드
      - name: Download Test Results
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: CI - Verify Unit Test
          name: test-results
          run_id: ${{ github.event.workflow_run.id }}

      # 이벤트 파일 다운로드
      - name: Download Event File
        if: ${{ github.event.workflow_run.pull_requests && github.event.workflow_run.pull_requests[0] }}
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: CI - Verify Unit Test
          name: event-file
          run_id: ${{ github.event.workflow_run.id }}

      # 테스트 결과를 PR에 게시 또는 커밋 상태 업데이트
      - name: Publish Unit Test Results
        if: ${{ github.event.workflow_run.pull_requests && github.event.workflow_run.pull_requests[0] }}
        uses: EnricoMi/publish-unit-test-result-action@v2.17.1
        with:
          commit: ${{ github.event.workflow_run.head_sha }} # 관련 커밋의 SHA
          pull_request: ${{ github.event.workflow_run.pull_requests[0].number }} # PR 번호
          files: "test-results/**/*.xml" # 다운로드한 JUnit XML 파일 경로
          event_file: event-file/event.json # 다운로드한 이벤트 파일 경로
          event_name: ${{ github.event.workflow_run.event }} # 이벤트 이름
          comment_mode: update # 기존 코멘트 업데이트
          always_create_status: true # 항상 상태 업데이트 생성
          fail_on: test_failures > 0 # 실패 기준 설정
          report_individual_runs: false # 테스트 결과 요약만 게시
          update_check: true # 항상 체크 업데이트

      # 커밋 상태 업데이트 (Push와 PR 공통 처리)
      - name: Create Check Run Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const status = '${{ job.status }}';
            const checkRun = await github.rest.checks.create({
              owner: github.context.repo.owner,
              repo: github.context.repo.repo,
              name: 'Unit Test Results',
              head_sha: github.context.sha,  // 커밋의 SHA
              status: status === 'success' ? 'completed' : 'completed', // 상태
              conclusion: status === 'success' ? 'success' : 'failure', // 결론
              output: {
                title: 'Unit Test Results',
                summary: 'Unit tests for the workflow run',
                text: 'Detailed results of the unit tests will be shown.'
              }
            });

